const int B1;
const int B2;
const int B3;
const int B4;


"single1": Pmax=? [F{"utilityLocal"}>B1,{"energyLocal"}<=B2 true ];
// Note: Equivalent to 'Pmax=? [ F{reward{"utilityLocal"}>B1} !"emptyBattery" ] on original_files/maximalUtility/0Nprocs.prism
// Also note that the original query considers the "emptyBattery"-labeled states as goal states (no negation).
// This means that that more energy can be consumed: If the battery load is l then we can still do one transition with energy e>l.


"single2": Pmax=? [F{"utilityGlobal"}>B3,{"energyGlobal"}<=B4 true ];
// Note: Equivalent to 'Pmax=? [F{reward{"energyGlobal"}<=B4} success]' on original_files/minimalEnergy/0Nprocs.prism

"single3": Pmax=? [F{"utilityLocal"}>B1,{"energyLocal"}<=B2,{"utilityGlobal"}>B3,{"energyGlobal"}<=B4 true ];

"multi1": multi(Pmax=? [F{"utilityLocal"}>B1,{"energyLocal"}<=B2 true ], Pmax=? [F{"utilityGlobal"}>B3,{"energyGlobal"}<=B4 true ]);

