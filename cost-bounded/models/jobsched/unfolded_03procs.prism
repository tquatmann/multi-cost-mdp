mdp

formula globalFailure = (loc_1=crit&t_1=0&failure_1|loc_2=crit&t_2=0&failure_2|loc_3=crit&t_3=0&failure_3);
formula noGlobalFailure = !(((loc_1=crit&t_1=0&failure_1|loc_2=crit&t_2=0&failure_2|loc_3=crit&t_3=0&failure_3)));
formula localFailure = loc_1=crit&t_1=0&failure_1;
formula noLocalFailure = !((loc_1=crit&t_1=0&failure_1));
formula process_1_finishes = (loc_1=crit&t_1=0);
formula process_2_finishes = (loc_2=crit&t_2=0);
formula process_3_finishes = (loc_3=crit&t_3=0);

label "globalFailure" = (((loc_1=crit&t_1=0&failure_1|loc_2=crit&t_2=0&failure_2|loc_3=crit&t_3=0&failure_3)));
label "noGlobalFailure" = ((!(((loc_1=crit&t_1=0&failure_1|loc_2=crit&t_2=0&failure_2|loc_3=crit&t_3=0&failure_3)))));
label "localFailure" = ((loc_1=crit&t_1=0&failure_1));
label "noLocalFailure" = ((!((loc_1=crit&t_1=0&failure_1))));
label "process_1_finishes" = (((loc_1=crit&t_1=0)));
label "process_2_finishes" = (((loc_2=crit&t_2=0)));
label "process_3_finishes" = (((loc_3=crit&t_3=0)));

const int N = 3;
const int t_max = 9;
const int undef = 0;
const int ncrit = 2;
const int wait = 0;
const int crit = 1;
const int none = 0;
const int process_1 = 1;
const int process_2 = 2;
const int process_3 = 3;
const int m_1 = 1;
const int m_2 = 1;
const int m_3 = 2;
const int boost_multiplicator = 3;

module Resources

	boost_1 : [0..1] init 0;
	user_1 : [0..3] init none;

	[tick] user_1=none&loc_1=wait -> (user_1'=process_1);
	[tick] user_1=none&loc_1=wait -> (user_1'=process_1) & (boost_1'=1);
	[tick] user_1=process_1&!(((loc_1=crit&t_1=0))) -> true;
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_1!=wait&loc_2!=wait&loc_3!=wait -> (user_1'=none) & (boost_1'=0);
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_2=wait -> (user_1'=process_2) & (boost_1'=1);
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_2=wait -> (user_1'=process_2) & (boost_1'=0);
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_3=wait -> (user_1'=process_3) & (boost_1'=1);
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_3=wait -> (user_1'=process_3) & (boost_1'=0);
	[tick] user_1=none&loc_2=wait -> (user_1'=process_2);
	[tick] user_1=none&loc_2=wait -> (user_1'=process_2) & (boost_1'=1);
	[tick] user_1=process_2&!(((loc_2=crit&t_2=0))) -> true;
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_1!=wait&loc_2!=wait&loc_3!=wait -> (user_1'=none) & (boost_1'=0);
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_1=wait -> (user_1'=process_1) & (boost_1'=1);
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_1=wait -> (user_1'=process_1) & (boost_1'=0);
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_3=wait -> (user_1'=process_3) & (boost_1'=1);
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_3=wait -> (user_1'=process_3) & (boost_1'=0);
	[tick] user_1=none&loc_3=wait -> (user_1'=process_3);
	[tick] user_1=none&loc_3=wait -> (user_1'=process_3) & (boost_1'=1);
	[tick] user_1=process_3&!(((loc_3=crit&t_3=0))) -> true;
	[tick] user_1=process_3&(((loc_3=crit&t_3=0)))&loc_1!=wait&loc_2!=wait&loc_3!=wait -> (user_1'=none) & (boost_1'=0);
	[tick] user_1=process_3&(((loc_3=crit&t_3=0)))&loc_1=wait -> (user_1'=process_1) & (boost_1'=1);
	[tick] user_1=process_3&(((loc_3=crit&t_3=0)))&loc_1=wait -> (user_1'=process_1) & (boost_1'=0);
	[tick] user_1=process_3&(((loc_3=crit&t_3=0)))&loc_2=wait -> (user_1'=process_2) & (boost_1'=1);
	[tick] user_1=process_3&(((loc_3=crit&t_3=0)))&loc_2=wait -> (user_1'=process_2) & (boost_1'=0);
	[tick] user_1=none&loc_1!=wait&loc_2!=wait&loc_3!=wait -> true;

endmodule

module Process_1

	failure_1 : bool init false;
	loc_1 : [0..2] init ncrit;
	t_1 : [0..t_max] init 0;

	[tick] loc_1=ncrit&t_1!=0 -> (t_1'=t_1-1);
	[tick] loc_1=ncrit&t_1=0 -> 2/3 : (t_1'=9) & (loc_1'=wait) + 1/3 : (t_1'=7) & (loc_1'=wait);
	[tick] loc_1=wait&user_1!=process_1 -> (t_1'=max(0, t_1-1));
	[tick] loc_1=wait&user_1=process_1 -> 1/3 : (loc_1'=crit) & (t_1'=2) & (failure_1'=(2<(boost_1+1)*t_1) ? false : true) + 2/3 : (loc_1'=crit) & (t_1'=3) & (failure_1'=(3<(boost_1+1)*t_1) ? false : true);
	[tick] loc_1=crit&t_1>0 -> (t_1'=max(t_1-(boost_1+1), 0));
	[tick] loc_1=crit&t_1=0 -> 2/3 : (loc_1'=ncrit) & (t_1'=4) & (failure_1'=false) + 1/3 : (loc_1'=ncrit) & (t_1'=5) & (failure_1'=false);

endmodule

module Process_2

	failure_2 : bool init false;
	loc_2 : [0..2] init ncrit;
	t_2 : [0..t_max] init 0;

	[tick] loc_2=ncrit&t_2!=0 -> (t_2'=t_2-1);
	[tick] loc_2=ncrit&t_2=0 -> 2/3 : (t_2'=9) & (loc_2'=wait) + 1/3 : (t_2'=7) & (loc_2'=wait);
	[tick] loc_2=wait&user_1!=process_2 -> (t_2'=max(0, t_2-1));
	[tick] loc_2=wait&user_1=process_2 -> 1/3 : (loc_2'=crit) & (t_2'=2) & (failure_2'=(2<(boost_1+1)*t_2) ? false : true) + 2/3 : (loc_2'=crit) & (t_2'=3) & (failure_2'=(3<(boost_1+1)*t_2) ? false : true);
	[tick] loc_2=crit&t_2>0 -> (t_2'=max(t_2-(boost_1+1), 0));
	[tick] loc_2=crit&t_2=0 -> 2/3 : (loc_2'=ncrit) & (t_2'=4) & (failure_2'=false) + 1/3 : (loc_2'=ncrit) & (t_2'=5) & (failure_2'=false);

endmodule

module Process_3

	t_3 : [0..t_max] init 0;
	failure_3 : bool init false;
	loc_3 : [0..2] init ncrit;

	[tick] loc_3=ncrit&t_3!=0 -> (t_3'=t_3-1);
	[tick] loc_3=ncrit&t_3=0 -> 2/3 : (t_3'=9) & (loc_3'=wait) + 1/3 : (t_3'=7) & (loc_3'=wait);
	[tick] loc_3=wait&user_1!=process_3 -> (t_3'=max(0, t_3-1));
	[tick] loc_3=wait&user_1=process_3 -> 1/3 : (loc_3'=crit) & (t_3'=2) & (failure_3'=(2<(boost_1+1)*t_3) ? false : true) + 2/3 : (loc_3'=crit) & (t_3'=3) & (failure_3'=(3<(boost_1+1)*t_3) ? false : true);
	[tick] loc_3=crit&t_3>0 -> (t_3'=max(t_3-(boost_1+1), 0));
	[tick] loc_3=crit&t_3=0 -> 2/3 : (loc_3'=ncrit) & (t_3'=4) & (failure_3'=false) + 1/3 : (loc_3'=ncrit) & (t_3'=5) & (failure_3'=false);

endmodule

const int B4;
module energyGlobal
	r4 : [0..B4+1] init B4+1;

	 [tick] true -> (r4'=max(0, r4 - (0 + m_1 * ((loc_1=ncrit ? 2 : 0) + (loc_1=wait ? 1 : 0) + (loc_1=crit & user_1=process_1 & boost_1=0 ? 3 : 0) + (loc_1=crit & user_1=process_1 & boost_1=1 ? 3*boost_multiplicator : 0) ) + m_2 * ((loc_2=ncrit ? 2 : 0) + (loc_2=wait ? 1 : 0) + (loc_2=crit & user_1=process_2 & boost_1=0 ? 3 : 0) + (loc_2=crit & user_1=process_2 & boost_1=1 ? 3*boost_multiplicator : 0) ) + m_3 * ((loc_3=ncrit ? 2 : 0) + (loc_3=wait ? 1 : 0) + (loc_3=crit & user_1=process_3 & boost_1=0 ? 3 : 0) + (loc_3=crit & user_1=process_3 & boost_1=1 ? 3*boost_multiplicator : 0) ))));
endmodule
const int B2;
module energyLocal
	r2 : [0..B2+1] init B2+1;

	 [tick] true -> (r2'=max(0, r2 - (m_1 * ((loc_1=ncrit ? 2 : 0) + (loc_1=wait ? 1 : 0) + (loc_1=crit & user_1=process_1 & boost_1=0 ? 3 : 0) + (loc_1=crit & user_1=process_1 & boost_1=1 ? 3*boost_multiplicator : 0) ))));
endmodule
const int B3;
module utilityGlobal
	r3 : [0..B3+1] init B3+1;

	 [tick] true -> (r3'=max(0, r3 - (0 + (loc_1=crit & t_1=0 & !failure_1 ? 1 : 0) + (loc_2=crit & t_2=0 & !failure_2 ? 1 : 0) + (loc_3=crit & t_3=0 & !failure_3 ? 1 : 0))));
endmodule
const int B1;
module utilityLocal
	r1 : [0..B1+1] init B1+1;

	 [tick] true -> (r1'=max(0, r1 - ((loc_1=crit & t_1=0 & !failure_1 ? 1 : 0))));
endmodule


label "bound1" = r1>0;
label "bound2" = r2>0;
label "bound3" = r3>0;
label "bound4" = r4>0;

